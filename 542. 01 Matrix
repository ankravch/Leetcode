class Solution {
public:
    
    vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) {
        if(matrix.size() == 0 || matrix[0].size() == 0)
            return matrix;
        vector<vector<int>> ret(matrix.size(), vector<int>(matrix[0].size(), INT_MAX));
        queue<pair<int, int>> pos;
        for(int i=0; i<matrix.size(); i++)
        {
            for(int j=0; j<matrix[0].size(); j++)
            {
                if(matrix[i][j] == 0)
                {
                    ret[i][j] = 0;
                    pos.push(make_pair(i, j));
                }
            }
        }
        
        while(!pos.empty())
        {
            pair<int, int>& tmp = pos.front();
            pos.pop();
        
            int i=tmp.first;
            int j=tmp.second;
            if(i-1>=0 && ret[i-1][j] > (ret[i][j]+1))
            {
                ret[i-1][j] = (ret[i][j]+1);
                pos.push(make_pair(i-1, j));
            }
        
            if(i+1<matrix.size() && ret[i+1][j] > (ret[i][j]+1))
            {
                ret[i+1][j] = (ret[i][j]+1);
                pos.push(make_pair(i+1, j));
            }
        
            if(j-1>=0 && ret[i][j-1] > (ret[i][j]+1))
            {
                ret[i][j-1] = (ret[i][j]+1);
                pos.push(make_pair(i, j-1));
            }
        
            if(j+1<matrix[0].size() && ret[i][j+1] > (ret[i][j]+1))
            {
                ret[i][j+1] = (ret[i][j]+1);
                pos.push(make_pair(i, j+1));
            }
        }
        return ret;
    }
};
