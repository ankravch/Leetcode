/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
class NestedIterator {
public:
    stack<NestedInteger> base;
    
    NestedIterator(vector<NestedInteger> &nestedList) {
        for(int i=nestedList.size(); i>0; i--)
            base.push(nestedList[i-1]);
    }

    int next() {
        int ret = base.top().getInteger();
        base.pop();
        return ret;
    }

    bool hasNext() {
        while(base.size())
        {
            NestedInteger tmp = base.top();
            if(tmp.isInteger())
                return true;
            base.pop();
            for(int i=tmp.getList().size(); i>0; i--)
                base.push(tmp.getList()[i-1]);
        }
        return false;
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
