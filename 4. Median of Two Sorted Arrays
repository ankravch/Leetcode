class Solution {
public:
    double findKthSortedArrays(vector<int>& nums1, vector<int>& nums2, int k, int l1, int r1, int l2, int r2)
    {
        if(l1>r1)
            return nums2[k+l2-1]*1.0;
        else if(l2>r2)
            return nums1[k+l1-1]*1.0;
        else
        {
            if(k == 1)
                return (nums1[l1]<nums2[l2]?nums1[l1]:nums2[l2])*1.0;
            
        int i1 = k/2;
        int i2 = k-i1;
        
        if((r1-l1+1)<i1 || (r2-l2+1)<i2)
        {
            if((r1-l1+1)<i1)
            {
                i1 = r1-l1+1;
                i2 = min(i2, r2-l2+1);
            }
            else
            {
                i2 = r2-l2+1;
                i1 = min(k-i2, r1-l1+1);
            }
        }
            
        if(nums1[l1+i1-1] > nums2[l2+i2-1])
            return findKthSortedArrays(nums1, nums2, k-i2, l1, r1, l2+i2, r2)*1.0;
        else if(nums1[l1+i1-1] < nums2[l2+i2-1])
            return findKthSortedArrays(nums1, nums2, k-i1, l1+i1, r1, l2, r2)*1.0;
        else
            return nums1[l1+i1-1]*1.0;
        }
    }
    
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int k = nums1.size() + nums2.size();
        if(k&1)
            return findKthSortedArrays(nums1, nums2, (k+1)/2, 0, nums1.size()-1, 0, nums2.size()-1);
        else
            return (findKthSortedArrays(nums1, nums2, k/2, 0, nums1.size()-1, 0, nums2.size()-1) + 
                    findKthSortedArrays(nums1, nums2, k/2+1, 0, nums1.size()-1, 0, nums2.size()-1))/2.0;
    }
};
