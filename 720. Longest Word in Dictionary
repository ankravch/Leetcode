class Solution {
public:
    struct node{
        int end;
        struct node* nodes[26];
    };
    
    struct node* root;
    
    Solution()
    {
        root = (struct node*) calloc(1, sizeof(struct node));
        root->end = 1;
    }
    
    void build_prefix_tree(string word)
    {
        struct node* cur = root;
        for(int i=0; i<word.length(); i++)
        {
            struct node* tmp = cur->nodes[word[i] - 'a'];
            if(!tmp)
            {
                tmp = (struct node*) calloc(1, sizeof(struct node));
                cur->nodes[word[i] - 'a'] = tmp;
            }
            if(i == word.length()-1)
                tmp->end = 1;
            cur = tmp;
        } 
    }
    
    void prefix_tree_dfs(string &ret, string tmp, struct node* cur, char c)
    {
        if(cur->end != 1)
            return;
        if(cur != root)
            tmp += c;
        if(tmp.length() > ret.length())
        {
            ret = tmp;
        }
        for(int i=0; i<26; i++)
        {
            if(cur->nodes[i])
            {
                prefix_tree_dfs(ret, tmp, cur->nodes[i], 'a'+i);
            }
        }
    }
    
    string longestWord(vector<string>& words) {
        for(int i=0; i<words.size(); i++)
            build_prefix_tree(words[i]);
        
        string ret = "";
        prefix_tree_dfs(ret, "", root, '0');
        return ret;
    }
};
