/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void build_Graph(TreeNode* root, map<int, vector<TreeNode* >> &edges)
    {
        if(root)
        {
            if(edges.find(root->val) == edges.end())
            {
                vector<TreeNode* > tmp;
                edges[root->val] = tmp;
            }
            if(root->left)
            {
                edges[root->val].push_back(root->left);
                if(edges.find(root->left->val) == edges.end())
                {
                    vector<TreeNode* > tmp;
                    edges[root->left->val] = tmp;
                }
                edges[root->left->val].push_back(root);
                build_Graph(root->left, edges);
            }
            
            if(root->right)
            {
                edges[root->val].push_back(root->right);
                if(edges.find(root->right->val) == edges.end())
                {
                    vector<TreeNode* > tmp;
                    edges[root->right->val] = tmp;
                }
                edges[root->right->val].push_back(root);
                build_Graph(root->right, edges);
            }
        }
    }
    
    void distanceK(int target, int K, vector<int> &ret, map<int, vector<TreeNode* >>& edges, int p)
    {
        if(K == 0)
            ret.push_back(target);
        else
        {
            for(int i=0; i<edges[target].size(); i++)
            {
                if(p != edges[target][i]->val)
                    distanceK(edges[target][i]->val, K-1, ret, edges, target);
            }
        }
    }
    
    vector<int> distanceK(TreeNode* root, TreeNode* target, int K) {
        map<int, vector<TreeNode* >> edges;
        build_Graph(root, edges);
        vector<int> ret;
        map<int, vector<TreeNode* >>::iterator it = edges.begin();
        distanceK(target->val, K, ret, edges, INT_MIN);
        return ret;
    }
};
