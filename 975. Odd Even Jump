class Solution {
public:
    int oddEvenJumps(vector<int>& A) {
        vector<vector<bool>> dp(A.size(), vector<bool>(2, false));
        map<int, int> help;
        int ret = 1;
        (dp.back())[0] = true;
        (dp.back())[1] = true;
        help[A.back()] = A.size()-1;
        for(int i=A.size()-2; i>=0; i--)
        {
            auto upper = help.upper_bound(A[i]);
            auto lower = help.lower_bound(A[i]);
            
            if(lower == help.end()) //odd
                dp[i][1] = false;
            else
            {
                dp[i][1] = dp[lower->second][0];
                if(dp[i][1])
                    ret++;
            }
            
            if(upper == help.begin())
                dp[i][0] = false;
            else
                dp[i][0] = dp[(--upper)->second][1];
            help[A[i]] = i;
        }
        return ret;
    }
};
