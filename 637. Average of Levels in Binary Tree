/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void averageOfLevels(TreeNode* root, int height, vector<int> &help, vector<double> &ret)
    {
        if(root)
        {
            if(height > help.size())
            {
                help.push_back(1);
                ret.push_back(root->val);
            }
            else
            {
                help[height-1]++;
                ret[height-1] += root->val;
            }
            averageOfLevels(root->left, height+1, help, ret);
            averageOfLevels(root->right, height+1, help, ret);
        }
    }
    
    vector<double> averageOfLevels(TreeNode* root) {
        vector<int> count;
        vector<double> ret;
        averageOfLevels(root, 1, count, ret);
        for(int i=0; i<ret.size(); i++)
            ret[i] /= count[i];
        return ret;
    }
    
    //bfs  
    vector<double> averageOfLevels(TreeNode* root) {
        vector<double> ret;
        if(root == NULL)
            return ret;
        list<TreeNode *> queue;
        int curSize = 1;
        int nextSize = 0;
        TreeNode* tmp = root;
        queue.push_back(tmp);
        while(queue.size())
        {
            double sum = 0.0;
            for(int i=0; i<curSize; i++)
            {
                tmp = queue.front();
                queue.pop_front();
                sum += tmp->val;
                if(tmp->left)
                {
                    queue.push_back(tmp->left);
                    nextSize ++;
                }
                if(tmp->right)
                {
                    queue.push_back(tmp->right);
                    nextSize ++;
                }
            }
            ret.push_back(sum/curSize);
            curSize = nextSize;
            nextSize = 0;
        }
        return ret;
    }
};
