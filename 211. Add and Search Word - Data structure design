typedef struct Trie{
    bool isEnd;
    struct Trie* child[26];
} Trie;

typedef struct {
    Trie *root;
} WordDictionary;


/** Initialize your data structure here. */
WordDictionary* wordDictionaryCreate() {
    WordDictionary* words = (WordDictionary* )calloc(1, sizeof(WordDictionary));
    words->root = (Trie*) calloc(1, sizeof(Trie));
    return words;
}

/** Adds a word into the data structure. */
void wordDictionaryAddWord(WordDictionary* obj, char* word) {
    Trie *root = obj->root;
    if(!root)
        return;
    while(*word != '\0')
    {
        if((root->child)[*word - 'a'] == NULL)
        {
            Trie* tmp = (Trie*) calloc(1, sizeof(Trie));
            (root->child)[*word - 'a'] = tmp;
        }
        root = (root->child)[*word - 'a'];
        word++;
    }
    root->isEnd = true;
}

/** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
bool search(Trie* root, char* word)
{
    if(!root)
        return false;
    else if(*word == '\0')
    {
        if(root->isEnd)
            return true;
        else
            return false;
    }
    
    bool ret = false;
    if(*word != '.')
        ret |= search((root->child)[*word- 'a'], word+1);
    else
    {
        for(int i=0; i<26; i++)
        {
            ret |= search((root->child)[i], word+1);
            if(ret)
                break;
        }
    }
    return ret;
}

bool wordDictionarySearch(WordDictionary* obj, char* word) {
    Trie *root = obj->root;
    return search(root, word);
}

void freeTrie(Trie *root)
{
    if(root == NULL)
        return;
    
    for(int i=0; i<26; i++)
    {
        if((root->child)[i])
        {
            freeTrie((root->child)[i]);
        }
    }
    free(root);
}

void wordDictionaryFree(WordDictionary* obj) {
    Trie *root = obj->root;
    freeTrie(root);
}

/**
 * Your WordDictionary struct will be instantiated and called as such:
 * struct WordDictionary* obj = wordDictionaryCreate();
 * wordDictionaryAddWord(obj, word);
 * bool param_2 = wordDictionarySearch(obj, word);
 * wordDictionaryFree(obj);
 */
